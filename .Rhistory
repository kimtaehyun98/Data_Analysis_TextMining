txt <- readLines("hiphop.txt")
library(KoNLP)
library(dplyr)
txt <- readLines("hiphop.txt")
txt <- readLines("hiphop.txt")
txt <- readLines("hiphop.txt")
txt <- readLines("hiphop.txt")
txt <- readLines("hiphop.html")
head(txt)
txt <- readLines("hiphop.txt")
txt <- readLines("hiphop.txt")
head(txt)
install.packages("stringr")
library(stringr)
txt <- str_replace_all(txt, "\\W", " ")
#명사 추출하기
nouns <- extractNoun(txt)
library(KoNLP)
library(dplyr)
#명사 추출하기
nouns <- extractNoun(txt)
#명사 추출하기
nouns <- extractNoun(txt)
# 가사에서 명사 추출하기
nouns <- extractNoun(txt)
# 추출한 명사 list를 문자열 벡터로 반환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringAsFactors = F)
# 변수명 수정
df_word <- rename(df_word,
word = Var1,
freq = Freq)
# 두 글자 이상 단어 추출 (한 글자는 의미 없는 경우 많음! ex) 싶다-> 싶)
df_word <- filter(df_word,nchar(word) >= 2)
word
# 두 글자 이상 단어 추출 (한 글자는 의미 없는 경우 많음! ex) 싶다-> 싶)
df_word <- filter(df_word, nchar(word) >= 2)
rlang::last_error()
txt <- readLines("hiphop.txt")
txt <- str_replace_all(txt, "\\W", " ")  # 특수문자(정규식) 지우기
# 가사에서 명사 추출하기
nouns <- extractNoun(txt)
# 추출한 명사 list를 문자열 벡터로 반환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringAsFactors = F)
# 변수명 수정
df_word <- rename(df_word,
word = Var1,
freq = Freq)
# 두 글자 이상 단어 추출 (한 글자는 의미 없는 경우 많음! ex) 싶다-> 싶)
df_word <- filter(df_word, nchar(word) >= 2)
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top_20
# 두 글자 이상 단어 추출 (한 글자는 의미 없는 경우 많음! ex) 싶다-> 싶)
df_word <- filter(df_word, nchar(word) >= 2)
# 두 글자 이상 단어 추출 (한 글자는 의미 없는 경우 많음! ex) 싶다-> 싶)
df_word <- filter(df_word, nchar(word) >= 2)
type(word)
type.word
word.type
table(word)
# 가사에서 명사 추출하기
nouns <- extractNoun(txt)
# 추출한 명사 list를 문자열 벡터로 반환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringAsFactors = F)
txt <- readLines("hiphop.txt")
txt <- str_replace_all(txt, "\\W", " ")  # 특수문자(정규식) 지우기
# 가사에서 명사 추출하기
nouns <- extractNoun(txt)
# 추출한 명사 list를 문자열 벡터로 반환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringAsFactors = F)
txt <- readLines("hiphop.txt")
txt <- str_replace_all(txt, "\\W", " ")  # 특수문자(정규식) 지우기
# 가사에서 명사 추출하기
nouns <- extractNoun(txt)
# 추출한 명사 list를 문자열 벡터로 반환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringAsFactors = T)
# 변수명 수정
df_word <- rename(df_word,
word = Var1,
freq = Freq)
# 두 글자 이상 단어 추출 (한 글자는 의미 없는 경우 많음! ex) 싶다-> 싶)
df_word <- filter(df_word, nchar(word) >= 2)
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top_20
txt <- readLines("hiphop.txt")
txt <- str_replace_all(txt, "\\W", " ")  # 특수문자(정규식) 지우기
# 가사에서 명사 추출하기
nouns <- extractNoun(txt)
# 추출한 명사 list를 문자열 벡터로 반환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
# 데이터 프레임으로 변환
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
# 변수명 수정
df_word <- rename(df_word,
word = Var1,
freq = Freq)
# 두 글자 이상 단어 추출 (한 글자는 의미 없는 경우 많음! ex) 싶다-> 싶)
df_word <- filter(df_word, nchar(word) >= 2)
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top_20
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
# Dark2 색상 목록에서 8개 색상 추출
pal <- brewer.pal(8,"Dark2")
# Dark2 색상 목록에서 8개 색상 추출
pal <- brewer.pal(8,"Dark2")
# wordcloud() 함수는 실행할 때마다 다른 모양 만들어냄
# 따라서 난수를 고정함으로써 항상 같은 모양 만들어내기
set.seed(1107)
# 워드 클라우드 만들기
wordcloud(words = df_word$word,   # 단어
freq = df_word$freq,    # 빈도
min.freq = 2,           # 최소 단어 빈도
max.words = 200,        # 표현 단어 수
random.order = F,       # 고빈도 단어 중앙 배치
rot.per = .1,           # 회전 단어 비율
scale = c(4,0.3),       # 단어 크기 범위
colors = pal)           # 색상 목록
